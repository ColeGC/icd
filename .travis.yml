# https://docs.travis-ci.com/user/languages/r
language: r
# https://ropensci.org/blog/2016/07/12/travis-osx
# https://docs.travis-ci.com/user/ci-environment/

# for RcppEigen to compile, (but disable if brew gcc on mac to avoid conflict)
# fortran: true # set explicitly in each stanza? but not recognized by an "include" group.

# may need this for clang:
# export LD_LIBRARY_PATH=/usr/local/clang/lib:$LD_LIBRARY_PATH
#
# See this for more recent compiler support than old defaults:
# https://docs.travis-ci.com/user/languages/c/
#
# and
#
# https://docs.travis-ci.com/user/languages/cpp/

# assert the defaults for os and dist - will add macos and bionic etc. later
os: linux
dist: xenial

cache:
  - packages
  - ccache

#addons:
#  apt:
#    packages:
#      - valgrind # when I do do this (probably too slow for travis anyway, then just put the apt addon in the specific build)

cran: https://cloud.r-project.org
# by default, DON'T do --as-cran, as it stops us using environment variables
# that conflict. Instead, state approximate CRAN check environment variables explicitly. Blank is ignored? Try a non-empty innocuous argument.
r_check_args: '--timings'
warnings_are_errors: true
# this long list is due to the long chain of build dependencies, mostly due to tidyverse stuff. Will look for a way to slim this, e.g. although I do use readxl, this is not necessarily tested every time.
# N.b., these versions may be a bit older, and especially for compiled packages, they may need to be rebuilt anyway against Rcpp with the chosen compiler. MacOS builds are from source anyway, so it may be okay.
r_binary_packages:
  - R6
  - RODBC
  - Rcpp
  - RcppEigen
  - askpass
  - assertthat
  - backports
  - base64enc
  - brew
  - callr
  - cellranger
  - cli
  - commonmark
  - crayon
  - curl
  - desc
  - digest
  - ellipsis
  - evaluate
  - fansi
  - glue
  - highr
  - hms
  - htmltools
  - httr
  - jsonlite
  - knitr
  - magrittr
  - markdown
  - mime
  - openssl
  - pillar
  - pkgbuild
  - pkgconfig
  - pkgload
  - praise
  - prettyunits
  - processx
  - progress
  - ps
  - purrr
  - rappdirs
  - readxl
  - rematch
  - remotes
  - rlang
  - rmarkdown
  - roxygen2
  - rprojroot
  - rstudioapi
  - stringi
  - stringr
  - sys
  - testthat
  - tibble
  - tinytex
  - utf8
  - vctrs
  - withr
  - xfun
  - xml2
  - yaml

env:
    global:
        # don't know whether this is needed:
        - HOMEBREW_NO_INSTALL_CLEANUP=1
        # avoid the default install script upgrading packages we already installed from r-cran-xxx apt
        - R_REMOTES_UPGRADE=never

brew_packages:
  - gcc

before_install:
  # https://stackoverflow.com/questions/31879011/r-cant-find-packages-installed-by-travis
  # - mkdir -p "$HOME/R.icd.lib"
  # - echo R_LIBS=$HOME/R.icd.lib:/usr/lib/R/site-library/" > ~/.Renviron
  # - sudo chmod 2777 "$HOME/R.icd.lib"
  - mkdir -p ~/.R ;
  - if [[ $TRAVIS_R_VERSION_STRING == devel ]]; then cat tools/mk/travis-debug.mk >> ~/.R/Makevars; fi;
  # this is one of oldrel, release or devel per https://docs.travis-ci.com/user/languages/r#configuration-options
  - cat tools/mk/travis-nowarn.mk >> ~/.R/Makevars
  # ignore the stubs for the pre-built vignettes, as the latex environments on travis are heterogeneous!
  - echo '^vignettes\/.*-vignette\.Rnw$' >> .Rbuildignore

  # https://github.com/Homebrew/homebrew-core/blob/master/Formula/gcc.rb
  # I think PKG_CXX etc only needed in environment, or Makevars in the package itself? not ~/.R/Makevars.
  # openblas may need brew linking. may be best NOT to overwrite gfortran?
  # the R travis module has its own brew_packages command. If we are using Xcode toolchain, we can use the R module command 'disable_homebrew'
  #  - export HOMEBREW_NO_INSTALL_CLEANUP=1 && if [[ "$(uname -s)" = 'Darwin' ]] && [[ $ICD_USE_XCODE_CLANG != 'true' ]]; then
  #      brew upgrade ;
  #      brew install gcc ;
  #      brew link --overwrite gcc ;
  #      cat tools/mk/travis-macos.mk  >> ~/.R/Makevars ;
  #      Rscript -e 'install.packages("Rcpp", type = "source")' ;
  #    fi
  - pwd
  - cat ~/.R/Makevars
  - cat .Rbuildignore
  - if [[ -f /etc/.Renviron ]]; then cat /etc/.Renviron; fi
  - if [[ -f ~/.Renviron ]]; then cat ~/.Renviron; fi
  - Rscript -e '.libPaths(); getOption("repos")'

jobs:
  fast_finish: true
  include:
  - r: devel
    dist: bionic
    # note that the default compilers are quite far behind, e.g. bionic is only gcc 7 by default. See:
    # https://docs.travis-ci.com/user/languages/c/#choosing-compilers-to-test-against
    compiler: gcc
    env:
      - ICD_MINI_BENCH=true
  - r: release
    compiler: clang
    dist: bionic
    env:
      - ICD_MINI_BENCH=true
  - r: release
    compiler: gcc
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
    env:
    - ICD_COVERAGE=true
    - ICD_MINI_BENCH=false
    - ICD_TEST_SLOW=true
  - r: oldrel
    compiler: gcc
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
  # MacOS: https://docs.travis-ci.com/user/languages/c/#gcc-on-macos
  - r: release
    os: osx
    # xcode image is needed so things like _stdio.h are available to homebrew gcc
    osx_image: xcode10.3
    disable_homebrew: false
    addons:
      homebrew:
        packages:
          - gcc
          - checkbashisms
    env:
      - ICD_MINI_BENCH=true
  - r: devel
    os: osx
    # xcode image is needed so things like _stdio.h are available to homebrew gcc
    osx_image: xcode10.3
    disable_homebrew: false
    addons:
      homebrew:
        packages:
          - gcc
          - checkbashisms
  - r: devel
    os: osx
    disable_homebrew: true
    #env: ICD_USE_XCODE_CLANG=true
  - r: devel
    os: osx
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
    env:
        #- ICD_USE_XCODE_CLANG=true
    - ICD_MINI_BENCH=true
  - r: release
    os: osx
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
    env:
        #- ICD_USE_XCODE_CLANG=true
    - ICD_MINI_BENCH=true
  - r: release
    arch: arm64
    latex: false
    r_build_args: --no-build-vignettes --no-manual --resave-data=no
    r_check_args: --no-build-vignettes --no-vignettes --ignore-vignettes --no-codoc --no-manual
    env:
    - ICD_MINI_BENCH=true
    - ICD_TEST_SLOW=true
  allow_failures:
  # allow any osx to fail for now: error prone tool chains
  - os: osx
  - arch: arm64
  - arch: ppc64le
  - arch: s390x
  - r: oldrel
    # if these things are not matched exactly to the job, or top-level environment, etc., this won't allow failure?
  - r: release
    env:
    - ICD_COVERAGE=true

before_script:
# n.b., before_install bash exports are not preserved beyond each shell invocation.
 - set -o allexport; source tools/env/travis-global; set +o allexport;
 - echo "$LD_LIBRARY_PATH"
 - if [ x"$ICD_TEST_SLOW" = x"true" ]; then
     Rscript -e 'source("tools/split-tests.R"); testthat_split();';
   fi
 - printenv | sort

after_script:
 # should fail and stop travis with error if the quick benchmark code fails
 - if [ x"$ICD_MINI_BENCH" = x"true" ]; then
     cd benchmarks/icd-JSS3447-replication;
     eval "make bench3"
     eval "make replmat"
     cd ../..;
   fi

after_success:
 - if [ "$ICD_COVERAGE" = "true" ]; then
     Rscript -e 'source("tools/split-tests.R"); testthat_split();';
     Rscript -e 'install.packages("covr"); covr::codecov(quiet = FALSE)';
   fi

notifications:
  email:
    on_success: change
    on_failure: always
